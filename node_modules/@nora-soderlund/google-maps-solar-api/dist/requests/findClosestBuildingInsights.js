"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findClosestBuildingInsights = void 0;
const constants_1 = require("../constants");
function findClosestBuildingInsights(apiKeyOrProxyUrl, query) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = new URL("/v1/buildingInsights:findClosest", constants_1.GOOGLE_MAPS_SOLAR_API_BASE);
        if (typeof apiKeyOrProxyUrl === "string")
            url.searchParams.set("key", apiKeyOrProxyUrl);
        else
            url.host = apiKeyOrProxyUrl.host;
        url.searchParams.set("location.latitude", query.location.latitude.toString());
        url.searchParams.set("location.longitude", query.location.longitude.toString());
        if (query.requiredQuality)
            url.searchParams.set("requiredQuality", query.requiredQuality);
        const response = yield fetch(url);
        if (!response.ok)
            throw new Error("Google Maps Solar API returned a not-OK response: " + response.status + " " + response.statusText);
        return yield response.json();
    });
}
exports.findClosestBuildingInsights = findClosestBuildingInsights;
;
//# sourceMappingURL=findClosestBuildingInsights.js.map